<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>latex | Hrishikesh Terdalkar</title>
    <link>/tag/latex/</link>
      <atom:link href="/tag/latex/index.xml" rel="self" type="application/rss+xml" />
    <description>latex</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2023, Hrishikesh Terdalkar.</copyright><lastBuildDate>Tue, 08 Mar 2022 16:30:00 +0530</lastBuildDate>
    <image>
      <url>/media/icon_hube9c3e5f7a27217c9c8565129307f591_12218_512x512_fill_lanczos_center_3.png</url>
      <title>latex</title>
      <link>/tag/latex/</link>
    </image>
    
    <item>
      <title>Devanagari Transliteration in LaTeX</title>
      <link>/post/devanagari-transliteration-in-latex/</link>
      <pubDate>Tue, 08 Mar 2022 16:30:00 +0530</pubDate>
      <guid>/post/devanagari-transliteration-in-latex/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Devanagari&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Devanagari&lt;/a&gt; is the fourth most widely adopted writing system in the world, primarily used in the Indian subcontinent. The script is being used for more than 120 languages, some of the more notable languages being, Sanskrit, Hindi, Marathi, Pali, Nepali and several variations of these languages.&lt;/p&gt;
&lt;p&gt;Devanagari text can be transliterated in various &lt;a href=&#34;https://en.wikipedia.org/wiki/Devanagari_transliteration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;standard schemes&lt;/a&gt;. There exist several input systems based on these transliteration schemes to enable users easily input the text. More often than not, a user has a preference of scheme to type the input in. Similarly, at times, one faces a need to render it in a different scheme in the PDF document.&lt;/p&gt;
&lt;p&gt;In my case, I prefer using &lt;a href=&#34;https://launchpad.net/ubuntu/&amp;#43;source/ibus-m17n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ibus-m17n&lt;/code&gt;&lt;/a&gt; to type text in Devanagari. While writing articles that contain Devanagari text, I also faced the need to render the text as IAST in the final PDF.
One could always learn to input text in another input scheme, but that may get tedious. Similarly, transliterating each word using online systems such as &lt;a href=&#34;https://aksharamukha.appspot.com/converter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aksharamukha&lt;/a&gt; can also be a tedious task. So, I was looking for a way where I can type in Devanagari, and have it rendered in IAST after PDF compilation. As a solution, I came up with a system consisting of a small set of LaTeX commands to add custom syntax to LaTeX and a python transliteration script (based on &lt;a href=&#34;http://pypi.org/indic-transliteration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;indic-transliteration&lt;/code&gt;&lt;/a&gt; package) to serve as a middle-layer and process the LaTeX file to create a new LaTeX file with proper transliteration.&lt;/p&gt;
&lt;h2 id=&#34;latex-compilation-system-with-transliteration-support&#34;&gt;LaTeX Compilation System with Transliteration Support&lt;/h2&gt;
&lt;p&gt;There are two primary components to the system,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LaTeX Synatx&lt;/li&gt;
&lt;li&gt;Transliteration Script&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;latex-syntax&#34;&gt;LaTeX Syntax&lt;/h3&gt;
&lt;p&gt;XeTeX (&lt;code&gt;xelatex&lt;/code&gt;) and LuaTeX (&lt;code&gt;lualatex&lt;/code&gt;) have good unicode support and can be used to write Devanagari text. In the current example, I mention the setup with XeTeX.&lt;/p&gt;
&lt;p&gt;We first add the required packages in the preamble of the LaTeX (&lt;code&gt;.tex&lt;/code&gt;) file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;% This assumes your files are encoded as UTF8
\usepackage[utf8]{inputenc}

% Devanagari Related Packages
\usepackage{fontspec, xunicode, xltxtra}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;fontspec&lt;/code&gt;, we can define environments for font families, to write text in specific scripts. To write Devanagari text, one needs to have a Devanagari font available. (It is assumed here that one may need to write both in Devanagari as well as other transliteration schemes.)&lt;/p&gt;
&lt;p&gt;For more on Devanagari fonts, you may check the &lt;a href=&#34;#devanagari-fonts&#34;&gt;fonts section&lt;/a&gt; of this document. In this section, it is assumed that &lt;code&gt;Sanskrit 2003&lt;/code&gt; font is installed in the system.&lt;/p&gt;
&lt;p&gt;To define the environments as mentioned earlier, we add the following lines in the preamble.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;% Define Fonts
\newfontfamily\textskt[Script=Devanagari]{Sanskrit 2003}
\newfontfamily\textiast{Noto Serif}

% Commands for Devanagari Transliterations
\newcommand{\skt}[1]{{\textskt{#1}}}
\newcommand{\iast}[1]{{\textiast{#1}}}
\newcommand{\Iast}[1]{{\textiast{#1}}}
\newcommand{\IAST}[1]{{\textiast{#1}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This provides us with four commands. &lt;code&gt;\skt{}&lt;/code&gt; can be used to render Devanagari text. &lt;code&gt;\iast{}&lt;/code&gt;, &lt;code&gt;\Iast{}&lt;/code&gt; and &lt;code&gt;\IAST{}&lt;/code&gt; can be used to render devanagari text in IAST format in lower case, title case and upper case respectively. It should be noted that from the perspective of LaTeX engine, the commands &lt;code&gt;\iast{}&lt;/code&gt;, &lt;code&gt;\Iast{}&lt;/code&gt; and &lt;code&gt;\IAST{}&lt;/code&gt; are identical. They are just different syntactically to aid the python script to perform transliteration and apply appropriate modifications.
It should further be noted that we can define new font families and new commands for any of the valid schemes as per the requirement, which can potentially give us additional commands such &lt;code&gt;\velthuis{}&lt;/code&gt;, &lt;code&gt;\hk{}&lt;/code&gt; and so on.&lt;/p&gt;
&lt;h3 id=&#34;minimal-example&#34;&gt;Minimal Example&lt;/h3&gt;
&lt;p&gt;Equipped with these commands, and some Devanagari text, we have a minimal example as follows, stored in the file &lt;code&gt;minimal.tex&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\documentclass[10pt]{article}

% This assumes your files are encoded as UTF8
\usepackage[utf8]{inputenc}

% Devanagari Related Packages
\usepackage{fontspec, xunicode, xltxtra}

% Define Fonts
\newfontfamily\textskt[Script=Devanagari]{Sanskrit 2003}
\newfontfamily\textiast{Noto Serif}

% Commands for Devanagari Transliterations
\newcommand{\skt}[1]{{\textskt{#1}}}
\newcommand{\iast}[1]{{\textiast{#1}}}
\newcommand{\Iast}[1]{{\textiast{#1}}}
\newcommand{\IAST}[1]{{\textiast{#1}}}

\title{Transliteration of Devanagari Text}
\author{Hrishikesh Terdalkar}

\begin{document}

\maketitle

\skt{को न्वस्मिन् साम्प्रतं लोके गुणवान् कश्च वीर्यवान्।}

\iast{को न्वस्मिन् साम्प्रतं लोके गुणवान् कश्च वीर्यवान्।}

\Iast{को न्वस्मिन् साम्प्रतं लोके गुणवान् कश्च वीर्यवान्।}

\IAST{को न्वस्मिन् साम्प्रतं लोके गुणवान् कश्च वीर्यवान्।}

\end{document}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;transliteration-script&#34;&gt;Transliteration Script&lt;/h3&gt;
&lt;p&gt;The python script is used to perform transliteration and some clean-up on the LaTeX.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;python3 finalize.py minimal.tex final.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This result in the content being transformed in the following way,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;% ...

\skt{को न्वस्मिन् साम्प्रतं लोके गुणवान् कश्च वीर्यवान्।}

\iast{ko nvasmin sāmprataṃ loke guṇavān kaśca vīryavān|}

\Iast{Ko Nvasmin Sāmprataṃ Loke Guṇavān Kaśca Vīryavān|}

\IAST{KO NVASMIN SĀMPRATAṂ LOKE GUṆAVĀN KAŚCA VĪRYAVĀN|}

% ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now proceed to compile the &lt;code&gt;final.tex&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;xelatex final
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This results in the following output, 















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/hrishikeshrt/devanagari-transliteration-latex/master/minimal.png&#34; alt=&#34;PDF&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;anatomy-of-the-transliteration-script&#34;&gt;Anatomy of the Transliteration Script&lt;/h3&gt;
&lt;p&gt;At the core of the transliteration script, there is a function &lt;code&gt;transliterate_between&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def transliterate_between(
    text: str,
    from_scheme: str,
    to_scheme: str,
    start_pattern: str,
    end_pattern: str,
    post_hook: Callable[[str], str] = lambda x: x,
) -&amp;gt; str:
    &amp;quot;&amp;quot;&amp;quot;Transliterate the text appearing between two patterns

    Only the text appearing between patterns `start_pattern` and `end_pattern`
    it transliterated.
    `start_pattern` and `end_pattern` can appear multiple times in the full
    text, and for every occurrence, the text between them is transliterated.

    `from_scheme` and `to_scheme` should be compatible with scheme names from
    `indic-transliteration`

    Parameters
    ----------
    text : str
        Full text
    from_scheme : str
        Input transliteration scheme
    to_scheme : str
        Output transliteration scheme
    start_pattern : regexp
        Pattern describing the start tag
    end_pattern : regexp
        Pattern describing the end tag
    post_hook : Callable[[str], str], optional
        Function to be applied on the text within tags after transliteration
        The default is `lambda x: x`.

    Returns
    -------
    str
        Text after replacements
    &amp;quot;&amp;quot;&amp;quot;

    if from_scheme == to_scheme:
        return text

    def transliterate_match(matchobj):
        target = matchobj.group(1)
        replacement = transliterate(target, from_scheme, to_scheme)
        replacement = post_hook(replacement)
        return f&amp;quot;{start_pattern}{replacement}{end_pattern}&amp;quot;

    pattern = &amp;quot;%s(.*?)%s&amp;quot; % (re.escape(start_pattern), re.escape(end_pattern))
    return re.sub(pattern, transliterate_match, text, flags=re.DOTALL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can provide the start and end patterns as &lt;code&gt;\iast{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; respsectively, to transliterate the text enclosed in these tags.&lt;/p&gt;
&lt;p&gt;Using this function, we can write a generic function to work with any transliteration scheme.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def latex_transliteration(
    input_text: str,
    from_scheme: str,
    to_scheme: str
) -&amp;gt; str:
    &amp;quot;&amp;quot;&amp;quot;Transliaterate parts of the LaTeX input enclosed in scheme tags

    A scheme tag is of the form `\\to_scheme_lowercase{}` and is used
    when the desired output is in `to_scheme`.

    i.e.,
    - Tags for IAST scheme are enclosed in \\iast{} tags
    - Tags for VH scheme are enclosed in \\vh{} tags
    - ...

    Parameters
    ----------
    input_text : str
        Input text
    from_scheme : str
        Transliteration scheme of the text written within the input tags
    to_scheme : str
        Transliteration scheme to which the text within tags should be
        transliterated

    Returns
    -------
    str
        Text after replacement of text within the scheme tags
    &amp;quot;&amp;quot;&amp;quot;
    start_tag_pattern = f&amp;quot;\\{to_scheme.lower()}&amp;quot;
    end_tag_pattern = &amp;quot;}&amp;quot;
    return transliterate_between(
        input_text,
        from_scheme=from_scheme,
        to_scheme=to_scheme,
        start_pattern=start_tag_pattern,
        end_pattern=end_tag_pattern
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The names of schemes (and therefore the corresponding LaTeX commands) have to conform to the names of schemes used
by the &lt;code&gt;indic-transliteration&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;IAST is a case-insensitive transliteration scheme, and as such, we might be interested in specific capitalization of certain words (e.g. proper nouns). We can use the &lt;code&gt;post_hook&lt;/code&gt; argument to provide this function. Using that, we can create a function to handle the three variants of IAST mentioned previously, namely, &lt;code&gt;\iast{}&lt;/code&gt; (lower), &lt;code&gt;\Iast{}&lt;/code&gt; (title) and &lt;code&gt;\IAST{}&lt;/code&gt; (upper).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def devanagari_to_iast(input_text: str) -&amp;gt; str:
    &amp;quot;&amp;quot;&amp;quot;Transliaterate parts of the input enclosed in
    \\iast{}, \\Iast{} or \\IAST{} tags from Devanagari to IAST

    Text in \\Iast{} tags also undergoes a `.title()` post-hook.
    Text in \\IAST{} tags also undergoes a `.upper()` post-hook.

    Parameters
    ----------
    input_text : str
        Input text

    Returns
    -------
    str
        Text after replacement of text within the IAST tags
    &amp;quot;&amp;quot;&amp;quot;
    intermediate_text = transliterate_between(
        input_text,
        from_scheme=sanscript.DEVANAGARI,
        to_scheme=sanscript.IAST,
        start_pattern=&amp;quot;\\iast{&amp;quot;,
        end_pattern=&amp;quot;}&amp;quot;
    )
    intermediate_text = transliterate_between(
        intermediate_text,
        from_scheme=sanscript.DEVANAGARI,
        to_scheme=sanscript.IAST,
        start_pattern=&amp;quot;\\Iast{&amp;quot;,
        end_pattern=&amp;quot;}&amp;quot;,
        post_hook=lambda x: x.title()
    )
    final_text = transliterate_between(
        intermediate_text,
        from_scheme=sanscript.DEVANAGARI,
        to_scheme=sanscript.IAST,
        start_pattern=&amp;quot;\\IAST{&amp;quot;,
        end_pattern=&amp;quot;}&amp;quot;,
        post_hook=lambda x: x.upper()
    )

    return final_text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, there are other utility functions to remove comments and clean excessive whitespaces.&lt;/p&gt;
&lt;h3 id=&#34;extras&#34;&gt;Extras&lt;/h3&gt;
&lt;p&gt;Additionally, we may want some more structure to our setup, such as,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separation of ontent into multiple files&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\input{sections/section_devanagari.tex}
\input{sections/section_iast_lower.tex}
\input{sections/section_iast_title.tex}
\input{sections/section_iast_upper.tex}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Bibliography&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;\bibliographystyle{acm}
\bibliography{papers}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;final-latex-preparation&#34;&gt;Final LaTeX Preparation&lt;/h4&gt;
&lt;p&gt;We may have used the scheme tags across multiple sections. One option is to apply the transliteration script on every section file, to create a new set of section files and use those to compile the final LaTeX file.&lt;/p&gt;
&lt;p&gt;A simpler solution is available in the form of &lt;code&gt;latexpand&lt;/code&gt; which resolves the &lt;code&gt;\input{}&lt;/code&gt; commands to actually include the content and create a single consolidated LaTeX file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;latexpand main.tex &amp;gt; single.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can run the python script on this file to resolve the transliteration tags.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;python3 finalize.py main.tex final.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;compilation&#34;&gt;Compilation&lt;/h4&gt;
&lt;p&gt;When working with BibTeX, we often need to multiple times to get the correct rendering of references in the PDF. Usually, this requires&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;xelatex final
bibtex final
xelatex final
xelatex final
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, we can use &lt;code&gt;latexmk&lt;/code&gt; which takes care of the tedious compilation routines and reduces our job to a single command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;latexmk -pdflatex=&#39;xelatex %O %S&#39; -pdf -ps- -dvi- final.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another benefit of using &lt;code&gt;latexmk&lt;/code&gt; is, we can clean the numerous files generated by LaTeX engine using a one-liner as well,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;latexmk -c
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;makefile&#34;&gt;Makefile&lt;/h4&gt;
&lt;p&gt;Finally, we can place all of the console commands together in a &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;all: .all

.all: main.tex sections/*.tex papers.bib
	latexpand main.tex &amp;gt; single.tex
	python3 finalize.py single.tex final.tex

	latexmk -pdflatex=&#39;xelatex %O %S&#39; -pdf -ps- -dvi- final.tex

clear:
	latexmk -C
	rm single.tex
	rm final.tex

clean:
	latexmk -c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, now we can focus on writing content in the &lt;code&gt;.tex&lt;/code&gt; files and once we are done, simply use the command,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;We have made use of a number of external tools, and it is required to have these setup prior to the described solution.&lt;/p&gt;
&lt;h4 id=&#34;minimal-requirements&#34;&gt;Minimal Requirements&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;#minimal-example&#34;&gt;minimal example&lt;/a&gt; mentioned earlier requires only three things,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XeLaTeX (unicode support) (included in &lt;a href=&#34;https://www.tug.org/texlive/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TeX Live&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.org/project/indic-transliteration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;indic-transliteration&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;extra-requirements&#34;&gt;Extra Requirements&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;#extras&#34;&gt;extras&lt;/a&gt; have some more dependencies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bibtex.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BibTeX&lt;/a&gt; (optional) (bibliography support)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ctan.org/pkg/latexpand?lang=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;latexpand&lt;/code&gt;&lt;/a&gt; (optional) (resolve &lt;code&gt;\input{}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mg.readthedocs.io/latexmk.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;latexmk&lt;/code&gt;&lt;/a&gt; (optional) (simpler TeX compilation)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;devanagari-fonts&#34;&gt;Devanagari Fonts&lt;/h2&gt;
&lt;p&gt;Nowadays, there are several good Devanagari fonts available. Google Fonts also provides a &lt;a href=&#34;https://fonts.google.com/?subset=devanagari&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wide variety of Devanagari fonts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two of my personal favourites are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://omkarananda-ashram.org/Sanskrit/itranslator2003.htm#dls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sanskrit 2003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fonts.google.com/noto/specimen/Noto&amp;#43;Serif&amp;#43;Devanagari&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Noto Serif Devanagari&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;p&gt;The source code for the entire setup is available at &lt;a href=&#34;https://github.com/hrishikeshrt/devanagari-transliteration-latex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hrishikeshrt/devanagari-transliteration-latex&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
